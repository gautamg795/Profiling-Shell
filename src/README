CS111 Winter 2015 - Lab 1c - Profiling Shell
Gautam Gupta #304282688
Dylan Flanders #504274041

                             -----------
                             |Questions|
                             -----------
1. Must the first column of the log output be in nondecreasing order? If not,
give a counterexample.

- Yes, the first column of the log output must be in nondecreasing order.
  As soon as a process completes, it obtains an exclusive lock on the profiling
  file descriptor so that it will write to the file sequentially. This is
  checked in test-prof-ok.sh

2. Can the second column be less than the sum of the third and fourth columns,
other than due to rounding errors? If so, explain why.

- Yes, if the command being run uses multiple cores for execution, the sum of
  the user/system CPU time can in theory be greater than the real time. 

3. Can the second, third, or fourth column ever be negative? Briefly explain.

- The second column cannot be negative, because we used the CLOCK_MONOTONIC
  which is guaranteed to be strictly increasing; therefore, any time interval
  between calls to clock_gettime() will always result in a positive time. The
  third and fourth columns come from the getrusage() call, which does not report
  negative values for usage times.

4. How did you test your shell to make sure that log lines are not interleaved?
If you used test scripts, submit a copy of the scripts as part of your submission
tarball.

- Our log lines can not be interleaved for the same reasons mentioned in #1;
  when a process completes, it obtains an exclusive lock on the profiling file.
  It writes the profiling information to the file before unlocking the file. At
  no point are two processes simultaneously attempting to write to the logging
  file. We tested this in test-prof-ok.sh using a command such as `sleep .1 |
  sleep .1` to create two short-running processes that will terminate at
  approximately the same time. Our test script verifies that the lines are not
  interleaved and that the lines are still in nondecreasing order. 


Explanation of clock choice:
We used the CLOCK_MONOTONIC clock when logging real time because it strictly
increases linearly, as opposed to the CLOCK_REALTIME clock which can move
forwards and backwards to account for NTP corrections.  Therefore,
CLOCK_MONOTONIC is better for our purposes of calculating the time between two
events (beginning and ending of command execution), whereas CLOCK_REALTIME is
sufficient for logging the completion time of a command in seconds in UNIX time.

                            --------------
                            |Known Issues|
                            --------------
1c) After implementing the profiling execution model for our shell, we have no
additional features that we would like to call to your attention.

1b) We found that we were handling the exec command within a subshell incorrectly.
We fixed this problem by forking an additional time for subshells, so that the
contents of the subshell are taken care of by a child process. 

1a) If our program finds a syntax error in the input file, it may continue
outputting standard format for all commands found before the syntax error and
then note the line number of the syntax error and exit the program. However,
since this was later deemed unnecessary, other syntax errors may terminate the
program immediately with just an error message.
